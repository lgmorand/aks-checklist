[
  {
    "title": "Implement a proper Liveness probe",
    "priority": "High",
    "description": "Many applications running for long periods of time eventually transition to broken states, and cannot recover except by being restarted. Kubernetes provides liveness probes to detect and remedy such situations. The probe is here to tell Kubernetes to restart your pod when it is not responding anymore",
    "documentation": [
      {
        "title": "Configure Liveness, Readiness probes",
        "url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"
      }
    ],
    "tags": ["all", "development"]
  },
  {
    "title": "Implement a proper Readiness probe",
    "priority": "Medium",
    "description": "Sometimes, applications are temporarily unable to serve traffic. For example, an application might need to load large data or configuration files during startup, or depend on external services after startup. In such cases, you don’t want to kill the application, but you don’t want to send it requests either. Kubernetes provides readiness probes to detect and mitigate these situations. A pod with containers reporting that they are not ready does not receive traffic through Kubernetes Services.",
    "documentation": [
      {
        "title": "Configure Liveness, Readiness probes",
        "url": "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"
      }
    ],
    "tags": ["all", "development"]
  },
  {
    "title": "Implement a proper prestop hook",
    "priority": "Low",
    "description": "This hook is called immediately before a container is terminated due to an API request or management event such as liveness probe failure, preemption, resource contention and others. It can be used when you have critical process you want to finish or save when your pod is destroyed for any reason",
    "documentation": [
      {
        "title": "Container Lifecycle Hooks",
        "url": "https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"
      }
    ],
    "tags": ["all", "development"]
  },
  {
    "title": "Run more than one replica for your Deployment",
    "priority": "Medium",
    "description": "Ensure that your application always configure proper replicas to ensure resiliency.",
    "tags": ["all", "development"]
  },
  {
    "title": "Apply tags to all resources",
    "priority": "Medium",
    "description": "Ensure that your components are tagged, it could be business, security or technical tags and these tags will help to assess or apply relevant policies.",
    "tags": ["all", "development"]
  },
  {
    "title": "Implement autoscaling of your applications",
    "priority": "Low",
    "description": "The Horizontal Pod Autoscaler automatically scales the number of pods based on observed CPU utilization",
    "documentation": [
      {
        "title": "Horizontal Pod Autoscaler",
        "url": "https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"
      }
    ],
    "tags": ["all", "resiliency"]
  },
  {
    "title": "Store your secrets in Azure KeyVault",
    "priority": "Medium",
    "description": "Secrets are not encrypted in etcd, prefer to store your secrets in a proper HSM like Azure KeyVault. You can then inject secrets using CSI provider or continue to use FlexVolume if kubernetes < 1.16.",
    "documentation": [
      {
        "title": "Azure Key Vault Provider for Secret Store CSI Driver",
        "url": "https://github.com/Azure/secrets-store-csi-driver-provider-azure"
      },
      {
        "title": "Keyvault and flex volumes (Deprecated)",
        "url": "https://github.com/Azure/kubernetes-keyvault-flexvol"
      }
    ],
    "tags": ["all", "security"]
  },
  {
    "title": "Implement Pod Identity",
    "priority": "Medium",
    "description": "Don't use fixed credentials within pods or container images, as they are at risk of exposure or abuse. Instead, use pod identities to automatically request access using a central Azure AD identity solution",
    "detail": "When pods need access to other Azure services, such as Cosmos DB, Key Vault, or Blob Storage, the pod needs access credentials. These access credentials could be defined with the container image or injected as a Kubernetes secret, but need to be manually created and assigned. Often, the credentials are reused across pods, and aren't regularly rotated. Managed identities for Azure resources (currently implemented as an associated AKS open source project) let you automatically request access to services through Azure AD. You don't manually define credentials for pods, instead they request an access token in real time, and can use it to access only their assigned services.",
    "documentation": [
      {
        "title": "Use pod identity",
        "url": "https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-identity#use-pod-identities"
      }
    ],
    "tags": ["all", "security"]
  },
  {
    "title": "Use Kubernetes namespaces to properly isolate your Kubernetes resources",
    "priority": "Medium",
    "description": "Namespaces give you the ability to create logical partitions and enforce separation of your resources as well as limit the scope of user permissions. Don't forget not to use the Default namespace",
    "documentation": [
      {
        "title": "Namespaces",
        "url": "https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
      }
    ],
    "tags": ["all", "security"]
  },
  {
    "title": "Set up requests and limits on your containers",
    "priority": "High",
    "description": "When Containers have resource requests specified, the scheduler can make better decisions about which nodes to place Pods on. And when Containers have their limits specified, contention for resources on a node can be handled in a specified manner.",
    "documentation": [
      {
        "title": "Managing Compute Resources for Containers",
        "url": "https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
      }
    ],
    "tags": ["all", "resources"]
  },
  {
    "title": "Specify the security context of your pod/container",
    "priority": "Medium",
    "description": "A security context defines privilege and access control settings for a Pod or Container. Control the capabilities and the rights your container can have",
    "documentation": [
      {
        "title": "Configure a Security Context for a Pod or Container",
        "url": "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
      }
    ],
    "tags": ["all", "resources", "security"]
  }
]
